#+TITLE: KESS - Keep Emacs Simple, Stupid!
#+STARTUP: content
#+OPTIONS: toc:4 h:4

* Preface
OK, the following configuration is not as *simple* as promised, but I'm
trying achieve this goal as I'm getting more comfortable with emacs.
* Personal information
I got this [[https://github.com/sachac/.emacs.d][org-babel config]] idea from [[https://github.com/sachac][Sacha Chua]] and her [[http://sachachua.com/blog/][amazing blog]].
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Tiefeng Wu"
        user-mail-address "icebergwtf@qq.com")
#+END_SRC
* Setup load paths
#+BEGIN_SRC emacs-lisp
  (let ((home-lib-path (expand-file-name "~/.elisp/")))
    (when (file-directory-p home-lib-path)
      (add-to-list 'load-path home-lib-path)
      (load (concat home-lib-path "init.el") 'noerror)))
#+END_SRC
* Package setup
** package.el
Setup archive lists and initialize package.el
#+BEGIN_SRC emacs-lisp
  ;; package.el setup

  ;; helper functions
  (defun kess--add-to-package-archives (name url &optional overwrite append)
    (if (assoc name package-archives)
        (when overwrite
          (setcdr (assoc name package-archives) url))
      (add-to-list 'package-archives (cons name url) append)))

  (defun kess--insert-to-package-archives (name url &optional overwrite)
    (kess--add-to-package-archives name url overwrite))

  (defun kess--append-to-package-archives (name url &optional overwrite)
    (kess--add-to-package-archives name url overwrite 'append))

  ;; add archives to package-archives, if not exist
  (let* ((schema (or (and (gnutls-available-p)  "https://") "http://")))
    (kess--append-to-package-archives "gnu" (concat schema "elpa.gnu.org/packages/"))
    (kess--append-to-package-archives "melpa" (concat schema "melpa.org/packages/"))
    (kess--append-to-package-archives "marmalade" (concat schema "marmalade-repo.org/packages/")))

  (kess--append-to-package-archives "org" "http://orgmode.org/elpa/")

  (setq package-enable-at-startup nil)
  (package-initialize)
#+END_SRC
** use-package
[[https://github.com/jwiegley/use-package][use-package]] is very handy for package management, also I use bind-key to define
my own key bindings.
#+BEGIN_SRC emacs-lisp
  ;; use-package setup
  (unless (package-installed-p 'use-package)
    (unless (assoc 'use-package package-archive-contents)
      (package-refresh-contents))
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t
	  use-package-verbose t))

  (use-package diminish)
  (use-package bind-key)
#+END_SRC
** essential packages
These're packages I think essential for me.
*** no-littering
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
#+END_SRC
*** undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode 1))
#+END_SRC
*** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :demand
    :bind (:map company-active-map
                ("C-M-n" . company-next-page)
                ("C-M-p" . company-previous-page)
                ("C-n" . company-select-next-or-abort)
                ("C-p" . company-select-previous-or-abort)
                ("ESC" . company-abort))
    :config
    (setq company-idle-delay 0.3
          company-tooltip-limit 12
          company-minimum-prefix-length 2
          company-tooltip-align-annotations t)
    (global-company-mode 1))
#+END_SRC
*** ido
Setup ido but not using it by default.
#+BEGIN_SRC emacs-lisp
  (use-package ido-ubiquitous :defer t)
  (use-package flx-ido
    :defer t
    :config
    (setq ido-auto-merge-work-directories-length -1
          ido-create-new-buffer 'always
          ido-default-file-method 'selected-window
          ido-enable-flex-matching t
          ido-enable-prefix nil
          ido-max-prospects 10
          ido-use-faces nil
          ido-use-filename-at-point 'guess)
    (flx-ido-mode 1))
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand
    :ensure counsel
    :diminish ivy-mode
    :bind (:map ivy-minibuffer-map
                ("C-j" . ivy-immediate-done)
                ("RET" . ivy-alt-done)
                ("C-." . kess-cycle-ivy-regex-method))
    :bind (:map read-expression-map
                ("C-r" . counsel-expression-history))
    :config
    (add-hook 'after-init-hook
              (lambda ()
                (when (bound-and-true-p ido-ubiquitous-mode)
                  (ido-ubiquitous-mode -1))
                (when (bound-and-true-p ido-mode)
                  (ido-mode -1))
                (ivy-mode 1)))

    (setq-default ivy-use-virtual-buffers t
                  ivy-count-format ""
                  ivy-initial-inputs-alist '((man . "^") (woman . "^"))
                  projectile-completion-system 'ivy)

    (setq ivy-use-virtual-buffers t
          enable-recursive-minibuffers t)

    (use-package ivy-historian
      :config
      (add-hook 'after-init-hook (lambda () (ivy-historian-mode t))))

    (use-package flx))
#+END_SRC
* Default setup
** better-defaults
Use [[https://github.com/technomancy/better-defaults][better-defaults]] package as start point
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults)
#+END_SRC
** my defaults
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4
                indent-tabs-mode nil
                show-trailing-whitespace t)

  (setq inhibit-startup-screen t
        gc-cons-threshold 20000000
        gdb-many-windows t
        default-fill-column 80
        highlight-nonselected-windows t
        scroll-conservatively 9999
        scroll-margin 5
        scroll-step 1
        system-time-locale "C"
        tramp-default-method "ssh"
        diff-switches "-u"
        dired-dwim-target t
        delete-by-moving-to-trash t)

  (winner-mode 1)
  (show-paren-mode 1)
  (electric-pair-mode 1)
  (recentf-mode 1)
  (column-number-mode 1)
  (savehist-mode 1)

  (setq display-time-24hr-format t
        display-time-day-and-date t)
  (display-time-mode 1)

  (setq linum-format "%4d")
  (global-linum-mode 1)
#+END_SRC
** emacs apperence
Load faviorite theme, and since I'm still an emacs newbie, I perfer to enable
menu bar under GUI mode, whenever I'm getting lost, menu bar come for rescue.
#+BEGIN_SRC emacs-lisp
  (load-theme 'tango-dark)
  (when window-system
    (menu-bar-mode 1)
    (add-hook 'after-init-hook
              (or (and (eq system-type 'windows-nt) 'toggle-frame-maximized)
                  'toggle-frame-fullscreen)))
#+END_SRC
* Useful packages
In order to be KESS, these're packages besides essential packages loaded above.
#+BEGIN_SRC emacs-lisp
  (use-package ag :defer t)
  (use-package ack :defer t)
  (use-package cl-lib :config (require 'cl-lib))
  (use-package dtrt-indent
    :config
    (setq dtrt-indent-active-mode-line-info " [dtrt]")
    (dtrt-indent-mode 1))
  (use-package fullframe :config (fullframe list-packages quit-window))
  (use-package smex :defer t)
  (use-package popwin :config (popwin-mode 1))
#+END_SRC
* Shell setup
#+BEGIN_SRC emacs-lisp
  (let ((hooks '(comint-mode-hook term-mode-hook eshell-mode-hook)))
    (dolist (hook hooks)
      (add-hook hook (lambda () (setq show-trailing-whitespace nil)))))
#+END_SRC
* Evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :config
    (unbind-key "C-z" evil-normal-state-map)
    (unbind-key "C-z" evil-motion-state-map)
    (unbind-key "C-z" evil-insert-state-map)

    (setq evil-esc-delay 0)

    (use-package evil-visualstar
      :config
      (global-evil-visualstar-mode t))

    (use-package evil-leader
      :config
      (setq evil-leader/in-all-states 1)
      (evil-leader/set-leader ",")
      (global-evil-leader-mode)
      (evil-leader/set-key "/" 'evil-search-highlight-persist-remove-all)))

  (use-package evil-numbers
    :demand
    :bind (:map evil-normal-state-map
                ("+" . evil-numbers/inc-at-pt)
                ("-" . evil-numbers/dec-at-pt)))

  (use-package evil-search-highlight-persist
    :config
    (unbind-key "C-x SPC" evil-search-highlight-persist-map)
    (global-evil-search-highlight-persist t))
#+END_SRC
* Coding setup
** Common coding setup
*** common setup
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda ()
              (subword-mode +1)
              (diminish 'subword-mode)))

  (use-package eldoc
    :diminish eldoc-mode
    :config
    (add-hook 'prog-mode-hook 'eldoc-mode))

  (use-package paredit
    :ensure eldoc
    :config
    (autoload 'enable-paredit-mode
      "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (eldoc-add-command 'paredit-backward-delete 'paredit-close-round)
    (add-hook 'paredit-mode-hook
              (lambda ()
                (when (and paredit-mode (bound-and-true-p smartparens-mode))
                  (smartparens-mode -1)
                  (smartparens-strict-mode -1))))
    (add-hook 'lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'scheme-mode-hook 'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode))

  (use-package smartparens
    :config
    (require 'smartparens-config)
    (sp-use-smartparens-bindings)
    (show-smartparens-global-mode)
    (add-hook 'smartparens-mode-hook
              (lambda ()
                (when (and smartparens-mode (bound-and-true-p paredit-mode))
                  (disable-paredit-mode))
                (if smartparens-mode
                    (smartparens-strict-mode +1)
                  (smartparens-strict-mode -1))))
    (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'org-mode-hook 'turn-on-smartparens-strict-mode))

  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  (use-package color-identifiers-mode
    :diminish color-identifiers-mode
    :config
    (global-color-identifiers-mode))
#+END_SRC
*** tags
#+BEGIN_SRC emacs-lisp
  (use-package ctags-update
    :diminish ctags-auto-update-mode
    :config
    (ctags-global-auto-update-mode)
    (setq ctags-update-prompt-create-tags nil)
    (autoload 'turn-on-ctags-auto-update-mode
      "ctags-update" "turn on 'ctags-auto-update-mode'." t)
    (add-hook 'prog-mode-hook 'turn-on-ctags-auto-update-mode))
#+END_SRC
*** syntax check
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :config
    (use-package flycheck-pos-tip)
    (when (display-graphic-p (selected-frame))
      (eval-after-load 'flycheck
        '(custom-set-variables
          '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))))
#+END_SRC
** Lisp coding setup
*** common setup
#+BEGIN_SRC emacs-lisp
#+END_SRC
*** emacs-lisp
#+BEGIN_SRC emacs-lisp
  (defadvice eval-print-last-sexp
      (before ad-eval-print-last-sexp activate compile)
    (end-of-defun))

  (add-to-list 'auto-mode-alist '("Cask"  . emacs-lisp-mode))
  (add-to-list 'auto-mode-alist '("archive-contents" . emacs-lisp-mode))
#+END_SRC
*** common lisp
#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "sbcl")

  ;; Stop SLIME's REPL from grabbing DEL,
  ;; which is annoying when backspacing over a '('
  (defun override-slime-repl-bindings-with-paredit ()
    (define-key slime-repl-mode-map
      (read-kbd-macro paredit-backward-delete-key) nil))
  (add-hook 'slime-repl-mode-hook
            'override-slime-repl-bindings-with-paredit)
#+END_SRC
*** scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :disabled
    :config
    (require 'geiser)
    (setq geiser-active-implementations '(racket))
    (defun geiser-save ()
      (interactive)
      (geiser-repl--write-input-ring)))
  (add-to-list 'auto-mode-alist '("rkt"  . scheme-mode))
#+END_SRC
*** clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :defer t
    :config
    (add-hook 'clojure-mode-hook 'turn-on-smartparens-strict-mode))

  (use-package cider
    :ensure clojure-mode
    :bind (:map cider-mode-map
                ("M-D" . cider-eval-defun-at-point)
                ("M-F" . cider-eval-file)
                ("M-G" . cider-eval-region)
                ("M-H" . cider-eval-buffer)
                ("<C-return>" . cider-eval-last-sexp)
                ("<M-return>" . cider-eval-print-last-sexp))
    :config
    (defadvice cider-eval-print-last-sexp
        (before ad-cider-eval-print-last-sexp activate compile)
      (end-of-defun)))

  ;; (use-package clj-refactor
  ;;   :ensure clojure-mode
  ;;   :config
  ;;   (add-hook 'clojure-mode-hook
  ;;             (lambda ()
  ;;               (clj-refactor-mode 1)
  ;;               (yas-minor-mode 1)
  ;;               (cljr-add-keybindings-with-prefix "C-c C-m"))))
#+END_SRC
** Erlang/Elixir setup
#+BEGIN_SRC emacs-lisp
  (when (and erlang-root-dir (file-exists-p erlang-root-dir))
    (use-package erlang
      :config
      (require 'erlang-start)))

  (use-package alchemist)
#+END_SRC
** JavaScript/TypeScript setup
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2
        css-indent-offset 2)

  (use-package js2-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

  (use-package tide
    :demand
    :hook ((typescript-mode . tide-setup)
           ;; (before-save . tide-format-before-save)
           (typescript-mode . tide-hl-identifier-mode))
    :config
    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)

    (setq tide-format-options
          '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))

    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      ;; company is an optional dependency. You have to
      ;; install it separately via package-install
      ;; `M-x package-install [ret] company`
      (company-mode +1))

    (add-hook 'js2-mode-hook #'setup-tide-mode)
    ;; configure javascript-tide checker to run after your default javascript checker
    (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))

  (use-package web-mode
    :ensure tide
    :config
    (require 'web-mode)

    ;; TSX
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode)

    ;; JSX
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "jsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
    ;; configure jsx-tide checker to run after your default jsx checker
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append))
#+END_SRC
** Ruby coding setup
#+BEGIN_SRC emacs-lisp
  (defun kess-send-ruby-buffer-and-go ()
    "Wrapper for `ruby-send-buffer' call and switch `inf-rub' buffer."
    (interactive)
    (ruby-send-buffer)
    (ruby-switch-to-inf t))

  (defun kess-send-last-ruby-sexp-and-go ()
    "Wrapper for `ruby-send-last-sexp' call and switch to `inf-ruby' buffer."
    (interactive)
    (ruby-send-last-sexp)
    (ruby-switch-to-inf t))

  (use-package ruby-mode
    :bind (:map ruby-mode-map
                ("TAB" . indent-for-tab-command)
                ("<f6>" . ruby-compilation-this-buffer)
                ("<f7>" . ruby-compilation-this-test))
    :config
    (add-to-list 'auto-mode-alist '("\\.builder\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.cap\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.gemspec\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.irbrc\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.jbuilder\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.podspec\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.pryrc\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.rake\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.rabl\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.rjs\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.rxml\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.ru\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.thor\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Appraisals\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Berksfile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Capfile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Gemfile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Guardfile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Kirkfile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Podfile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Puppetfile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Rakefile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Thorfile\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Vagrantfile\\'" . ruby-mode))

    (add-to-list 'auto-mode-alist '("Gemfile\\.lock\\'" . conf-mode))

    (add-to-list 'completion-ignored-extensions ".rbc")

    (setq-default ruby-use-encoding-map nil
                  ruby-insert-encoding-magic-comment nil)

    (add-hook 'ruby-mode-hook
              (lambda ()
                (unless (derived-mode-p 'prog-mode)
                  (run-hooks 'prog-mode-hook))))

    (add-hook 'ruby-mode-hook
              (lambda ()
                (set (make-local-variable 'highlight-symbol-ignore-list)
                     (list (concat "\\_<" (regexp-opt '("do" "end")) "\\_>")))))

    (use-package ruby-tools
      :diminish ruby-tools-mode
      :config
      (add-hook 'ruby-mode-hook 'ruby-tools-mode))

    (use-package ruby-electric
      :diminish ruby-electric-mode
      :config
      (add-hook 'ruby-mode-hook 'ruby-electric-mode))

    (use-package rspec-mode)

    (use-package yard-mode
      :diminish yard-mode
      :config
      (add-hook 'ruby-mode-hook 'yard-mode))

    (use-package yari
      :config
      (defalias 'ri 'yari))

    (use-package goto-gem)
    (use-package bundler)

    (use-package ruby-compilation
      :config
      (defalias 'rake 'ruby-compilation-rake))

    (use-package inf-ruby
      :demand
      :bind (:map inf-ruby-minor-mode-map
                  ("M-D" . ruby-send-definition-and-go)
                  ("M-F" . ruby-send-block-and-go)
                  ("M-G" . ruby-send-region-and-go)
                  ("M-H" . kess-send-ruby-buffer-and-go)
                  ("<C-return>" . ruby-send-last-sexp)
                  ("<M-return>" . kess-send-last-ruby-sexp-and-go))
      :config
      (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
      (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter))

    (use-package robe
      :diminish robe-mode
      :config
      (add-hook 'ruby-mode-hook 'robe-mode)
      (dolist (hook '(ruby-mode-hook inf-ruby-mode-hook haml-mode))
        (add-hook hook (lambda () (push 'company-robe company-backends)))))

    (use-package yaml-mode)

    (use-package ruby-hash-syntax))
#+END_SRC
** C# coding setup
More dig into omnisharp-emacs.
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :defer t
    :config
    (use-package omnisharp
      :config
      (eval-after-load
          'company
        '(add-to-list 'company-backends 'company-omnisharp))

      (add-hook 'csharp-mode-hook #'company-mode)
      (add-hook 'csharp-mode-hook #'flycheck-mode)

      (defun my-csharp-mode-setup ()
        (omnisharp-mode)
        (company-mode)
        (flycheck-mode)

        (setq indent-tabs-mode nil)
        (setq c-syntactic-indentation t)
        (c-set-style "ellemtel")
        (setq c-basic-offset 4)
        (setq truncate-lines t)
        (setq tab-width 4)
        (setq evil-shift-width 4)

        ;;csharp-mode README.md recommends this too
        ;;(electric-pair-mode 1)       ;; Emacs 24
        ;;(electric-pair-local-mode 1) ;; Emacs 25

        (local-set-key (kbd "C-c r r") 'omnisharp-run-code-action-refactoring)
        (local-set-key (kbd "C-c C-c") 'recompile))

      (add-hook 'csharp-mode-hook 'my-csharp-mode-setup t)))
#+END_SRC
** mmm-mode setup
(Disabled for now)
#+BEGIN_SRC emacs-lisp
  (use-package mmm-mode
    :disabled
    :config
    (require 'mmm-auto)
    (require 'mmm-erb)
    (setq mmm-global-mode 'auto)
    (mmm-add-mode-ext-class 'csharp-mode "\\.cs\\.erb$" 'erb))
#+END_SRC
** misc setup
#+BEGIN_SRC emacs-lisp
#+END_SRC
* Project management
Just start to use them, maybe one of both is enough? Or maybe a wrapper package
to benefit from both? (Another tough task)
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :disabled
    :demand
    :config
    (projectile-global-mode)
    (setq projectile-indexing-method 'alien
          projectile-enable-caching t))
#+END_SRC
** find-file-in-project
#+BEGIN_SRC emacs-lisp
  (use-package find-file-in-project :ensure ivy)
#+END_SRC
** find-file-in-repository
#+BEGIN_SRC emacs-lisp
  (use-package find-file-in-repository)
#+END_SRC
* Orgmode
#+BEGIN_SRC emacs-lisp
  (setq org-archive-mark-done nil
        org-catch-invisible-edits 'smart
        org-completion-use-ido t
        org-ctrl-k-protect-subtree t
        org-edit-timestamp-down-means-later t
        org-enforce-todo-checkbox-dependencies t
        org-enforce-todo-dependencies t
        org-export-coding-system 'utf-8
        org-export-kill-product-buffer-when-displayed t
        org-fast-tag-selection-single-key 'expert
        org-hide-emphasis-markers t
        org-html-validation-link nil
        org-log-done 'time
        org-return-follows-link t
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        org-special-ctrl-o t
        org-use-speed-commands t
        org-startup-indented t
        org-support-shift-select t
        org-tags-column 80
        org-use-property-inheritance t)
#+END_SRC
* Emacs server
Start server if not already running. Properly set server to work on MSWin is
painful.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (require 'server)
              (let ((server-running (server-running-p)))
                (message "server status: %s" server-running)
                (unless (eq server-running t)
                  (message "starting emacs server...")
                  (server-start)
                  (if (eq (server-running-p) t)
                      (message "emacs server started!")
                    (message "emacs server start failed!"))))))
#+END_SRC
* Bindings
** Utility functions
#+BEGIN_SRC emacs-lisp
  (defcustom kess-switch-black-list '("\\*.*\\*" "TAGS")
    "Regex list for filter buffer names which will be ignored while
      switching buffer through `kess-switch-buffer'.")

  (defcustom kess-switch-white-list '("\\*Org Src .*")
    "Regex list for filter buffer names which will be allowed while
      switching buffer through `kess-switch-buffer'.")

  (defun kess--ignore-buffer-p (buffer)
    "Match given buffer name BUFFER with all patterns in BLACKLIST.

      Return t if a match is found, otherwise nil."
    (cond ((member-if (lambda (pat) (string-match-p pat buffer)) kess-switch-white-list) nil)
          ((member-if (lambda (pat) (string-match-p pat buffer)) kess-switch-black-list) t)))

  (defun kess-switch-buffer (&optional prev)
    "Switch to next/previous buffer, skip buffer names matched in
      `kess-switch-black-list' and allow those names specified in
      `kess-switch-white-list'.

      Switch to next buffer by default, if PREV is non-nil then switch
      to previous buffer."
    (let ((bread-crumb (buffer-name))
          (switch-fn (or (and prev 'previous-buffer) 'next-buffer)))
      (funcall switch-fn)
      (while (and (not (equal bread-crumb (buffer-name)))
                  (kess--ignore-buffer-p (buffer-name)))
        (funcall switch-fn))
      (when (and (equal bread-crumb (buffer-name))
                 (kess--ignore-buffer-p (buffer-name)))
        (funcall switch-fn))))

  (defun kess-switch-next-win-or-buf (&optional force-buffer)
    "Switch to next window, if FORCE-BUFFER is not nil or just one
      window in frame, then switch to next buffer.

      Switch buffer by calling `kess-switch-buffer' with default
      argument."
    (interactive "P")
    (if (or force-buffer (one-window-p 'nomini))
        (kess-switch-buffer)
      (other-window 1)))

  (defun kess-switch-prev-win-or-buf (&optional force-buffer)
    "Switch to previous window, if FORCE-BUFFER is not nil or just
      one window in frame, then switch to previous buffer.

      Switch buffer by call `kess-switch-buffer' with 'PREV."
    (interactive "P")
    (if (or force-buffer (one-window-p 'nomini))
        (kess-switch-buffer 'prev)
      (other-window -1)))

  (defun kess-indent-buffer ()
    "Indent whole buffer."
    (interactive)
    (indent-region (point-min) (point-max) nil))

  (defun kess-kill-buf-or-win (&optional force-buffer)
    "Kill current buffer or delete window (if not single window).

      Kill buffer if FORCE-BUFFER is not nil."
    (interactive "P")
    (if (or force-buffer (one-window-p 'nomini))
        (progn
          (kill-buffer)
          (when (kess--ignore-buffer-p (buffer-name))
            (kess-switch-next-win-or-buf)))
      (delete-window)))

  (defun kess-delete-other-windows ()
    "Delete other windows or restore to previous windows layout.

      if not only one window in frame then delete other windows and
      recenter selected window.

      Otherwise use `winner-undo' to restore previous windows layout
      configurations."
    (interactive)
    (if (one-window-p 'nomini)
        (progn (setq this-command 'winner-undo)
               (winner-undo))
      (progn (delete-other-windows)
             (recenter))))

  (defun kess-cycle-ivy-regex-method ()
    "Cycle switch ivy minibuffer regex match method."
    (interactive)
    (let ((method (assoc t ivy-re-builders-alist))
          (methods '(ivy--regex-plus ivy--regex-fuzzy)))
      (if (null method)
          (setq-default ivy-re-builders-alist '((t . ivy--regex-plus)))
        (let ((next (cadr (member (cdr method) methods))))
          (setcdr method (or next (car methods)))))))

  (defun kess-toggle-scratch-buffer ()
    "Switch to *scratch* buffer."
    (interactive)
    (if (equal (buffer-name) "*scratch*")
        (kess-switch-prev-win-or-buf 'force-buffer)
      (switch-to-buffer "*scratch*")))

  (defun kess--frame-pixel-height-no-mini ()
    (- (frame-pixel-height)
       (window-pixel-height (minibuffer-window))))

  (defun kess--resize-window-height (delta)
    "Change current window height by given DELTA. Check window
      vertical position to determin how window height needs to be
      changed."
    (if (= (nth 3 (window-pixel-edges))
           (kess--frame-pixel-height-no-mini))
        (window-resize-no-error (selected-window) (* -1 delta))
      (window-resize-no-error (selected-window) delta)))

  (defun kess-resize-window-height-up ()
    "Wrapper for `kess-resize-window-height' function call to fit
      the behavior 'up'."
    (interactive)
    (kess--resize-window-height -1))

  (defun kess-resize-window-height-down ()
    "Wrapper for `kess-resize-window-height' function call to fit
      the behavior 'down'."
    (interactive)
    (kess--resize-window-height 1))

  (defun kess--resize-window-width (delta)
    "Change current window width by given DELTA. Check window
      horizontal position to determin how window width needs to be
      changed."
    (if (= (nth 2 (window-pixel-edges))
           (frame-pixel-width))
        (window-resize-no-error (selected-window) (* -1 delta) 'horizontal)
      (window-resize-no-error (selected-window) delta 'horizontal)))

  (defun kess-resize-window-width-left ()
    "Wrapper for `kess-resize-window-width' function call to fit
      the behavior 'left'."
    (interactive)
    (kess--resize-window-width -1))

  (defun kess-resize-window-width-right ()
    "Wrapper for `kess-resize-window-width' function call to fit
      the behavior 'right'."
    (interactive)
    (kess--resize-window-width 1))

  (defun kess-open-line-below-or-append (&optional str)
    "Insert a newline and move point to it use
  `indent-new-comment-line' when STR is nil, otherwise append STR to
  the end of line."
    (interactive)
    (move-end-of-line 1)
    (let ((tr (buffer-substring-no-properties (point) (- (point) (length str)))))
      (if (stringp str)
          (unless (string-equal str tr)
            (insert str))
        (indent-new-comment-line))))

  (defun kess-info-elisp-manual ()
    "Open Emacs lisp manual info document."
    (interactive)
    (info "elisp"))

  (defmacro kess--defshortcut (name)
    (let ((symbol (intern name)))
      `(progn
         (defvar ,symbol nil)
         (defun ,symbol ()
           (interactive)
           (funcall ,symbol)))))

  (kess--defshortcut "kess-shortcut-0")
  (kess--defshortcut "kess-shortcut-1")
  (kess--defshortcut "kess-shortcut-2")
  (kess--defshortcut "kess-shortcut-3")
  (kess--defshortcut "kess-shortcut-4")
  (kess--defshortcut "kess-shortcut-5")
  (kess--defshortcut "kess-shortcut-6")
  (kess--defshortcut "kess-shortcut-7")
  (kess--defshortcut "kess-shortcut-8")
  (kess--defshortcut "kess-shortcut-9")

  (defun kess-undo ()
    (interactive)
    (when (not undo-tree-mode)
      (undo-tree-mode))
    (undo-tree-undo))

  (defun kess-redo ()
    (interactive)
    (when (not undo-tree-mode)
      (undo-tree-mode))
    (undo-tree-redo))
#+END_SRC
** Global bindings
#+BEGIN_SRC emacs-lisp
  (bind-keys ("<backspace>" . delete-backward-char))

  (bind-keys* ("<C-up>" . kess-resize-window-height-up)
              ("<C-down>" . kess-resize-window-height-down)
              ("<C-left>" . kess-resize-window-width-left)
              ("<C-right>" . kess-resize-window-width-right)

              ("<f12>" . evil-window-rotate-downwards)
              ("<C-f12>" . evil-window-rotate-upwards)

              ("M-N" . scroll-other-window)
              ("M-P" . scroll-other-window-down)

              ("M-x" . counsel-M-x)
              ("M-X" . smex)

              ("C-z" . kess-undo)
              ("M-z" . kess-redo)
              ("C-S-z" . undo-tree-visualize)

              ("M-Z" . zap-up-to-char)

              ("C-x b" . ivy-switch-buffer)
              ("C-x C-f" . counsel-find-file)
              ("C-x f" . find-file-in-current-directory)
              ("M-o" . find-file-in-repository)
              ("M-O" . find-file-in-project)

              ("C-S-g" . occur)
              ("C-S-s" . save-some-buffers)

              ("<C-tab>" . kess-switch-next-win-or-buf)
              ("<C-S-tab>" . kess-switch-prev-win-or-buf)
              ("<C-iso-lefttab>" . kess-switch-next-win-or-buf)
              ("<C-S-iso-lefttab>" . kess-switch-prev-win-or-buf)
              ("C-M-|" . kess-indent-buffer)
              ("M-`" . kess-kill-buf-or-win)

              ("C-+" . evil-numbers/inc-at-pt)
              ("C-_" . evil-numbers/dec-at-pt)
              ("C-:" . evil-ex)
              ("C-S-j" . evil-join)
              ("C-M-j" . join-line)

              ("C-M-/" . query-replace)
              ("C-M-?" . query-replace-regexp)

              ("C-h I" . kess-info-elisp-manual)
              ("C-h t" . cider-drink-a-sip)
              ("C-h T" . help-with-tutorial)

              ("C-h N" . describe-language-environment)
              ("C-h H" . view-hello-file)

              ("C-h h" . counsel-info-lookup-symbol)
              ("C-h L" . counsel-find-library)
              ("C-h u" . counsel-unicode-char)

              ("C-h R" . yari)
              ("C-j" . mark-sexp)
              ("C-S-o" . open-line)
              ("C-o" . kess-open-line-below-or-append)

              ("C-'" . set-mark-command)

              ("C-;" . (lambda () (interactive) (kess-open-line-below-or-append ";")))
              ("C-," . (lambda () (interactive) (kess-open-line-below-or-append ",")))
              ("C-/" . (lambda () (interactive) (kess-open-line-below-or-append ".")))
              ("C-=" . (lambda () (interactive) (kess-open-line-below-or-append " = ")))
              ("C--" . (lambda () (interactive) (kess-open-line-below-or-append " ->")))

              ("C-?" . swiper)
              ("C-`" . ivy-resume))
#+END_SRC
** Mode-map bindings
#+BEGIN_SRC emacs-lisp
  (require 'info)
  (bind-keys :map Info-mode-map
             ("<backspace>" . Info-scroll-down))
  (bind-keys :map org-mode-map
             ("M-n" . org-down-element)
             ("M-p" . org-up-element))
  (bind-keys :map emacs-lisp-mode-map
             ("M-D" . eval-defun)
             ("M-G" . eval-region)
             ("M-H" . eval-buffer)
             ("<C-return>" . eval-last-sexp)
             ("<M-return>" . eval-print-last-sexp))
  (bind-keys :map lisp-interaction-mode-map
             ("M-D" . eval-defun)
             ("M-G" . eval-region)
             ("M-H" . eval-buffer)
             ("<C-return>" . eval-last-sexp)
             ("<M-return>" . eval-print-last-sexp))
#+END_SRC
** Custom prefix keymap
To not mess up with emacs's own and other package's prefix maps, my custom
prefix binding use C-\, which I think very easy to reach.
#+BEGIN_SRC emacs-lisp
  ;; C-\ prefix map for nearly all my custom bindings, to not mess up
  ;; default or other installed package's bindings
  (define-prefix-command 'kess-prefix-map)
  (bind-key* (kbd "C-\\") kess-prefix-map)
  (bind-keys :map kess-prefix-map
             ("0" . kess-shortcut-0)
             ("1" . kess-shortcut-1)
             ("2" . kess-shortcut-2)
             ("3" . kess-shortcut-3)
             ("4" . kess-shortcut-4)
             ("5" . kess-shortcut-5)
             ("6" . kess-shortcut-6)
             ("7" . kess-shortcut-7)
             ("8" . kess-shortcut-8)
             ("9" . kess-shortcut-9)

             ("C-." . describe-personal-keybindings)
             ("\\" . evil-search-highlight-persist-remove-all)
             ("C-\\" . kess-delete-other-windows)
             ("/" . comment-region)
             ("C-/" . uncomment-region)

             ("ESC" . evil-mode)
             ("TAB" . org-force-cycle-archived)
             ("SPC" . whitespace-mode)

             ("`" . kess-toggle-scratch-buffer)
             ("0" . delete-frame)
             ("a" . org-archive-to-archive-sibling)
             ("b" . switch-to-buffer-other-window)
             ("c" . cider-jack-in)
             ("C" . cider-jack-in-clojurescript)
             ("d" . wdired-change-to-wdired-mode)
             ("D" . dired-other-window)
             ("e" . erlang-shell-display)
             ("E" . erlang-shell)
             ("f" . find-file-other-window)
             ("C-f" . flycheck-mode)
             ("g" . counsel-ag)
             ("C-g" . counsel-git)
             ("i" . alchemist-iex-project-run)
             ("I" . alchemist-iex-run)
             ("j" . counsel-git-grep)
             ("l" . counsel-locate)
             ("r" . inf-ruby)
             ("R" . inf-ruby-console-auto)
             ("s" . slime)
             ("t" . ctags-update)
             ("x" . smex-major-mode-commands)
             ("X" . execute-extended-command)

             ("=" . winner-redo)
             ("-" . winner-undo))
#+END_SRC
